import random
from typing import TYPE_CHECKING

from magicgui import magic_factory
from magicgui.widgets import Container, create_widget
from napari.utils.notifications import show_info
from qtpy.QtWidgets import QVBoxLayout, QPushButton, QWidget

if TYPE_CHECKING:
    import napari


def button_click_callback():
    """
    Callback function for the button click event across all widget creation approaches.
    """
    options = [
        "Ow!",
        "Stop it!",
        "That hurts!",
        "Please stop!",
        "I'm telling!",
        "I have been clicked",
        "Ouch!",
        "I have altered the code, pray I don't alter it further",
        "Are you having fun?",
        "This was generated by Copilot",
        "This isn't cookie clicker",
    ]
    # Select a random message from the list
    message = random.choice(options)
    show_info(message)


# Uses the `autogenerate: true` flag in the plugin manifest
# to indicate it should be wrapped as a magicgui to autogenerate
# a widget.
def example_function():
    # There's probably a better way to do this, but I don't use magicgui for reasons like this
    example_function._call_button.text = "Click me"
    button_click_callback()
    return


@magic_factory(call_button="Click me")
def example_factory():
    button_click_callback()
    return


class ExampleContainer(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self._viewer = viewer
        # use create_widget to generate widgets from type annotations
        self.btn = create_widget(label="Click me", widget_type="PushButton")
        self.btn.clicked.connect(button_click_callback)
        # Add the button to the container
        self.extend([self.btn])


class ExampleQWidget(QWidget):
    # your QWidget.__init__ can optionally request the napari viewer instance
    # use a type annotation of 'napari.viewer.Viewer' for any parameter
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self.viewer = viewer

        self.btn = QPushButton("Click me!")
        self.btn.clicked.connect(button_click_callback)

        self.setLayout(QVBoxLayout())
        self.layout().addWidget(self.btn)

    def _on_click(self):
        print("napari has", len(self.viewer.layers), "layers")
